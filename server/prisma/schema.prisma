generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Default location
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================
// Enums
// ========================
enum SubscriptionStatus {
  ACTIVE
  TRIAL
  EXPIRED
  CANCELLED
}

enum Tier {
  FREE
  PERSONAL
  TEAM
  ENTERPRISE
}

enum BillingType {
  MONTHLY
  YEARLY
}

enum Role {
  EMPLOYEE
  ADMIN
}

enum Condition {
  NEW
  USED
}

enum TransactionType {
  SALE
  BULK_SALE
  SWAP
  BUYBACK
}

enum Direction {
  DEBIT
  CREDIT
}

enum CustomerType {
  CUSTOMER
  DEBTOR
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
}

enum InstallmentFrequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
  QUARTERLY
  CUSTOM
  ONE_TIME
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

// ========================
// Models
// ========================
model Company {
  id                        String                     @id @default(uuid())
  tenantId                  String                     @unique @default(uuid())
  company_name              String
  company_email             String                     @unique
  password                  String
  country                   String
  canUpdate                 Boolean                    @default(true)
  canCancel                 Boolean                    @default(true)
  verified                  Boolean                    @default(false)
  pendingPlanUpdate         String?                    @db.VarChar(255)
  nextBillingDate           DateTime?                  @db.Timestamp(6)
  scheduledDeactivation     DateTime?                  @db.Timestamp(6)
  subscriptionStatus        SubscriptionStatus         @default(TRIAL)
  Subscription              CompanySubscription?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  User                      User[]
  Product                   Product[]
  auditLog                  AuditLog[]
  Transaction               Transaction[]
  Customer                  Customer[]
  Supplier                  Supplier[]
  CompanyStripeSubscription CompanyStripeSubscription?
  Notification              Notification[]
  CompanyAccount            CompanyAccount?

  @@index([company_email])
  @@index([id])
  @@index([tenantId])
}

model CompanyAccount {
  id              String     @id @default(uuid())
  tenantId        String @unique
  businessName    String
  businessEmail   String     @unique
  category        String?
  phoneNumber     String?
  businessAddress String?
  taxID           String?
  banks           UserBank[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  Company         Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String     @unique

  @@index([id])
  @@index([tenantId])
}

model CompanySubscription {
  id                       String      @id @default(uuid())
  tenantId                 String // Links to Company.tenantId
  payStackCustomerID       String
  payStackSubscriptionCode String?
  authorization_code       String?
  transactionId            String?
  tier                     Tier        @default(PERSONAL)
  tierType                 BillingType @default(MONTHLY)
  startDate                DateTime?
  endDate                  DateTime?
  last4                    String?
  exp_month                String?
  exp_year                 String?
  card_type                String?
  bank                     String?
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  companyId                String?     @unique
  company                  Company?    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([payStackCustomerID])
  @@unique([payStackSubscriptionCode])
  @@index([id])
  @@index([tenantId])
}

model CompanyStripeSubscription {
  id                       String      @id @default(uuid())
  tenantId                 String // Links to Company.tenantId
  stripeCustomerID         String?
  stripeSubscriptionID     String?
  stripeSubscriptionItemId String?
  tier                     Tier        @default(FREE)
  tierType                 BillingType @default(MONTHLY)
  startDate                DateTime?
  endDate                  DateTime?
  last4                    String?
  exp_month                Int?
  exp_year                 Int?
  card_type                String?
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  companyId                String?     @unique
  company                  Company?    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([stripeCustomerID])
  @@unique([stripeSubscriptionID])
  @@index([id])
  @@index([tenantId])
}

model Notification {
  id        String   @id @default(uuid())
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  tenantId  String
  message   String
  type      String
  createdAt DateTime @default(now())
}

model Otp {
  id        String   @id @default(uuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  verified  Boolean  @default(false)
}

model User {
  id          String        @id @default(uuid())
  tenantId    String        @unique
  first_name  String?
  last_name   String?
  email       String        @unique
  password    String
  phone       String?       @unique
  role        Role          @default(EMPLOYEE)
  companyId   String?       @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  Company     Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Product     Product[]
  Transaction Transaction[]

  @@index([id])
  @@index([email])
  @@index([tenantId])
  @@index([companyId])
}

model UserBank {
  id               String          @id @default(uuid())
  bankName         String
  acctNo           String?
  acctName         String?
  CompanyAccount   CompanyAccount? @relation(fields: [companyAccountId], references: [id])
  companyAccountId String?
  AccountPaidTo    AccountPaidTo[]
}

model WebhookEvent {
  id          String    @id @default(uuid())
  eventId     String    @unique // Provider's event ID
  eventType   String // "charge.success", "subscription.created"
  payload     Json // Raw event payload
  status      String // "processed", "failed", "retrying"
  attempts    Int       @default(0)
  processedAt DateTime?
  createdAt   DateTime  @default(now())
}

// Inventory 
model Product {
  id           String    @id @default(uuid())
  tenantId     String
  sku          String    @unique
  productName  String
  description  String?   @db.VarChar(250)
  brand        String
  productType  String
  costPrice    Decimal?  @default(0) @db.Decimal(12, 2)
  sellingPrice Decimal?  @db.Decimal(12, 2)
  serialNo     String?   @unique
  purchaseDate DateTime  @default(now())
  condition    Condition @default(NEW)
  quantity     Int       @default(1)

  // Audits
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  createdBy            User                   @relation(fields: [createdById], references: [id])
  createdById          String
  Company              Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId            String
  Supplier             Supplier?              @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId           String?
  ProductDeletionEvent ProductDeletionEvent[]
  TransactionItem      TransactionItem[]

  @@unique([sku, companyId, tenantId])
  @@index([productName])
  @@index([sku])
}

model ProductDeletionEvent {
  id           String   @id @default(uuid())
  productId    String
  deletionDate DateTime
  quantity     Int // The number of units deleted in this event
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Supplier {
  id               String    @id @default(uuid())
  name             String
  tenantId         String
  contact          String
  email            String?   @unique
  warehouseAddress String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  products         Product[]
  Company          Company?  @relation(fields: [companyId], references: [id])
  companyId        String?

  @@unique([name, contact])
  @@index([id])
  @@index([name])
}

// Transaction
model Transaction {
  id              String            @id @default(uuid())
  tenantId        String
  type            TransactionType
  date            DateTime          @default(now())
  createdById     String
  createdBy       User              @relation(fields: [createdById], references: [id])
  companyId       String
  Company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TransactionItem TransactionItem[]
  Customer        Customer?         @relation(fields: [customerId], references: [id])
  customerId      String?
  Payments        PaymentPlan[]

  @@index([companyId])
  @@index([type])
  @@index([date])
}

model TransactionItem {
  id            String      @id @default(uuid())
  transactionId String
  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  productId     String
  Product       Product     @relation(fields: [productId], references: [id])
  quantity      Int         @default(1)
  direction     Direction   @default(DEBIT)
  pricePerUnit  Decimal     @db.Decimal(12, 2)
  totalPrice    Decimal     @db.Decimal(12, 2)
  createdAt     DateTime    @default(now())

  @@index([transactionId])
  @@index([productId])
}

// Customer Or Debtor
model Customer {
  id          String        @id @default(uuid())
  tenantId    String
  companyId   String
  name        String
  email       String?
  phone       String
  address     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Transaction Transaction[]
  Payments    PaymentPlan[]

  @@unique([name, phone])
  @@index([name])
  @@index([companyId])
  @@index([tenantId])
}

// Payment Models
model PaymentPlan {
  id               String               @id @default(uuid())
  installmentCount Int
  frequency        InstallmentFrequency
  customerType     CustomerType         @default(CUSTOMER)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  payments         Payment[]
  Customer         Customer?            @relation(fields: [customerId], references: [id])
  customerId       String?
  Transaction      Transaction?         @relation(fields: [transactionId], references: [id])
  transactionId    String?
}

model Payment {
  id            String         @id @default(uuid())
  totalAmount   Decimal        @db.Decimal(12, 2)
  totalPay      Decimal        @db.Decimal(12, 2)
  vat           Decimal        @default(0) @db.Decimal(12, 2)
  balanceOwed   Decimal?       @default(0) @db.Decimal(12, 2)
  paymentDate   DateTime       @default(now())
  method        PaymentMethod
  paymentPlanId String?
  PaymentPlan   PaymentPlan?   @relation(fields: [paymentPlanId], references: [id])
  createdAt     DateTime       @default(now())
  acctPaidTo    AccountPaidTo?

  @@index([paymentDate])
}

model AccountPaidTo {
  id         String    @id @default(uuid())
  Payment    Payment?  @relation(fields: [paymentId], references: [id])
  paymentId  String?   @unique
  bank       UserBank? @relation(fields: [userBankId], references: [id])
  userBankId String?   @unique
}

// Audit
model AuditLog {
  id         String      @id @default(uuid())
  action     AuditAction // CREATE, UPDATE, DELETE
  entityType String // "Product", "Invoice", etc.
  entityId   String // ID of the affected record
  userId     String? // Who performed the action
  tenantId   String // Tenant context
  oldData    Json? // Previous state
  newData    Json? // Updated state
  companyId  String?
  createdAt  DateTime    @default(now())
  Company    Company?    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([companyId])
}
