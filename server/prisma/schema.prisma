// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Default location
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================
// Enums
// ========================
enum SubscriptionStatus {
  ACTIVE
  TRIAL
  EXPIRED
  CANCELLED
}

enum Tier {
  PERSONAL
  TEAM
  ENTERPRISE
}

enum BillingType {
  MONTHLY
  YEARLY
}

enum Role {
  EMPLOYEE
  ADMIN
}

enum Condition {
  NEW
  USED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

// ========================
// Models
// ========================
model Company {
  id                    String               @id @default(uuid())
  tenantId              String               @unique @default(uuid())
  company_name          String
  company_email         String               @unique
  password              String
  country               String
  canUpdate             Boolean              @default(true)
  canCancel             Boolean              @default(true)
  verified              Boolean              @default(false)
  pendingPlanUpdate     String?              @db.VarChar(255)
  nextBillingDate       DateTime?            @db.Timestamp(6)
  scheduledDeactivation DateTime?            @db.Timestamp(6)
  subscriptionStatus    SubscriptionStatus   @default(TRIAL)
  Subscription          CompanySubscription?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  User                  User[]
  Product               Product[]
  auditLog              AuditLog[]

  @@index([company_email])
  @@index([id])
  @@index([tenantId])
}

model CompanySubscription {
  id                       String      @id @default(uuid())
  tenantId                 String // Links to Company.tenantId
  payStackCustomerID       String
  payStackSubscriptionCode String?
  authorization_code       String?
  transactionId            String?
  tier                     Tier        @default(PERSONAL)
  tierType                 BillingType @default(MONTHLY)
  startDate                DateTime?
  endDate                  DateTime?
  last4                    String?
  exp_month                String?
  exp_year                 String?
  card_type                String?
  bank                     String?
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  companyId                String?     @unique
  company                  Company?    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([payStackCustomerID])
  @@unique([payStackSubscriptionCode])
  @@index([id])
  @@index([tenantId])
}

model Otp {
  id        String   @id @default(uuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  verified  Boolean  @default(false)
}

model User {
  id         String    @id @default(uuid())
  tenantId   String // Links to Company.tenantId
  first_name String?
  last_name  String?
  email      String    @unique
  password   String
  role       Role      @default(EMPLOYEE)
  companyId  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  Company    Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Product    Product[]

  @@index([id])
  @@index([email])
  @@index([tenantId])
  @@index([companyId])
}

model WebhookEvent {
  id          String    @id @default(uuid())
  eventId     String    @unique // Provider's event ID
  eventType   String // "charge.success", "subscription.created"
  payload     Json // Raw event payload
  status      String // "processed", "failed", "retrying"
  attempts    Int       @default(0)
  processedAt DateTime?
  createdAt   DateTime  @default(now())
}

// Inventory 
model Product {
  id              String    @id @default(uuid())
  tenantId        String
  sku             String    @unique
  productName     String
  description     String?   @db.VarChar(250)
  brand           String
  productType     String
  costPrice       Decimal   @default(0) @db.Decimal(12, 2)
  sellingPrice    Decimal   @db.Decimal(12, 2)
  serialNo        String?   @unique
  purchaseDate    DateTime  @default(now())
  condition       Condition @default(NEW)
  quantity        Int       @default(1)
  deletedQuantity Int       @default(0)

  // Audits
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  createdBy            User                   @relation(fields: [createdById], references: [id])
  createdById          String
  Company              Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId            String
  Supplier             Supplier               @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId           String
  ProductDeletionEvent ProductDeletionEvent[]

  @@unique([sku, companyId, tenantId])
  @@index([productName])
  @@index([sku])
}

model ProductDeletionEvent {
  id           String   @id @default(uuid())
  productId    String
  deletionDate DateTime
  quantity     Int // The number of units deleted in this event
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

//TODO:Add a variant schema for products that have variations e.g color, size e.t.c 

model Supplier {
  id        String    @id @default(uuid())
  name      String
  contact   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@unique([name, contact])
  @@index([id])
  @@index([name])
}

model AuditLog {
  id         String      @id @default(uuid())
  action     AuditAction // CREATE, UPDATE, DELETE
  entityType String // "Product", "Invoice", etc.
  entityId   String // ID of the affected record
  userId     String? // Who performed the action
  tenantId   String // Tenant context
  oldData    Json? // Previous state
  newData    Json? // Updated state
  companyId  String?
  createdAt  DateTime    @default(now())
  Company    Company?    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([companyId])
}
